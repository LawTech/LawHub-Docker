variable "module_name" { }
variable "organization" { }
variable "aws_region" { }
variable "ec2_iam_instance_profile" { }
variable "iam_role" { }
variable "my_ip_address" { }
variable "availability_zone" { }
variable "aws_key_name" { }
variable "vpc_id" { }
variable "ssh_public_key" { }
variable "instance_type" { }
variable "ami" { }
variable "destination_ansible_hosts_file" { }
variable "domain" { }
variable "server_name" { }
variable "subnet_id" { }

resource "aws_iam_instance_profile" "nextcloud_ec2_iam_instance_profile" {
name = "${var.ec2_iam_instance_profile}"
roles = ["${aws_iam_role.nextcloud_ec2_role.name}"]
}

resource "aws_iam_role" "nextcloud_ec2_role" {
name = "${var.iam_role}"
assume_role_policy = <<EOF
{
"Version": "2012-10-17",
"Statement": [
{
"Action": "sts:AssumeRole",
"Principal": {
"Service": "ec2.amazonaws.com"
},
"Effect": "Allow",
"Sid": ""
}
]
}
EOF
}

resource "aws_security_group" "nextcloud" {
name = "${var.organization}_${var.module_name}_SG"
description = "Allow incoming HTTP connections."
ingress {
from_port = 22
to_port = 22
protocol = "tcp"
cidr_blocks = ["${var.my_ip_address}/32"]
}
ingress {
from_port = 80
to_port = 80
protocol = "tcp"
security_groups = ["${aws_security_group.nextcloudELB-SG.id}"]
}
ingress {
from_port = 443
to_port = 443
protocol = "tcp"
security_groups = ["${aws_security_group.nextcloudELB-SG.id}"]
}
egress {
from_port = 0
to_port = 0
protocol = "-1"
cidr_blocks = ["0.0.0.0/0"]
}
vpc_id = "${var.vpc_id}"
tags {
Name = "${var.organization}_${var.module_name}_SG"
}
}

resource "aws_key_pair" "nextcloud" {
key_name = "${var.aws_key_name}"
public_key = "${var.ssh_public_key}"
}

resource "aws_eip" "nextcloud_server_eip" {
instance = "${aws_instance.nextcloud_server.id}"
vpc = true
provisioner "local-exec" {
command = "echo '[aws_nextcloud]\n${aws_eip.nextcloud_server_eip.public_ip}\n' > ${var.destination_ansible_hosts_file}"
}
}

resource "aws_instance" "nextcloud_server" {
ami = "${var.ami}"
availability_zone = "${var.availability_zone}"
instance_type = "${var.instance_type}"
key_name = "${var.aws_key_name}"
vpc_security_group_ids = ["${aws_security_group.nextcloud.id}"]
subnet_id = "${var.subnet_id}"
associate_public_ip_address = true
source_dest_check = false
iam_instance_profile = "${aws_iam_instance_profile.nextcloud_ec2_iam_instance_profile.name}"
disable_api_termination = false
tags {
Name = "${var.server_name}"
}
}

# Create a new load balancer
resource "aws_elb" "nextcloudELB" {
name = "${var.organization}-${var.module_name}-ELB"
subnets  = ["${var.subnet_id}"]
security_groups = ["${aws_security_group.nextcloudELB-SG.id}"]
listener {
instance_port = 80
instance_protocol = "http"
lb_port = 80
lb_protocol = "http"
}
listener {
instance_port = 443
instance_protocol = "https"
lb_port = 443
lb_protocol = "https"
ssl_certificate_id = "${data.aws_acm_certificate.nextcloud_cert.arn}"
}
health_check {
healthy_threshold = 2
unhealthy_threshold = 10
timeout = 3
target = "tcp:80"
interval = 5
}
instances = ["${aws_instance.nextcloud_server.id}"]
cross_zone_load_balancing = true
idle_timeout = 60
connection_draining = true
connection_draining_timeout = 400
tags {
Name = "${var.organization} - ${var.module_name}"
}
}

resource "aws_security_group" "nextcloudELB-SG" {
name        = "${var.organization}_${var.module_name}_elb_sg"
description = "${var.module_name} ELB SG"
vpc_id = "${var.vpc_id}"
ingress {
from_port   = 80
to_port     = 80
protocol    = "tcp"
cidr_blocks = ["0.0.0.0/0"]
}
ingress {
from_port   = 43
to_port     = 443
protocol    = "tcp"
cidr_blocks = ["0.0.0.0/0"]
}
# outbound internet access
egress {
from_port   = 0
to_port     = 0
protocol    = "-1"
cidr_blocks = ["0.0.0.0/0"]
}
}

data "aws_acm_certificate" "nextcloud_cert" {
domain = "${var.domain}"
statuses = ["ISSUED"]
}
output "dns_name" {
value = "${aws_elb.nextcloudELB.dns_name}"
}
output "instance_address" {
value = "${aws_eip.nextcloud_server_eip.public_ip}"
}
output "instance_private_address" {
value = "${aws_eip.nextcloud_server_eip.private_ip}"
}